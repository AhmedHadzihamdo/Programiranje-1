Zadatak 01
// --------------------------------------------------------------------------------------- //
Poštujuæi sve faze procesa programiranje, napisati program æe odrediti i ispisati 
zadnje tri cifre broja x^n. Unos brojeva x i n vršiti u glavnoj funkciji uz uslov 
10 < x < 100 i 2 < n < 10, a funkciju za odreðivanje zadnje tri cifre napraviti zasebno.
  
Primjer izlaza:
Unesite brojeve x i n: 64 i 5
Zadnje tri cifre broja su: 824
// --------------------------------------------------------------------------------------- //

Zadatak 02
// --------------------------------------------------------------------------------------- //
Napisati program koji æe uèitati prirodni broj n <= 10, a zatim n prirodnih trocifrenih 
brojeva koje treba pospremiti u odgovarajuæi niz.Taj niz brojeva treba sortirati uzlazno 
po srednjoj cifri. Nakon sortiranja treba ispisati dobiveni niz. Za sortiranje koristiti 
zasebnu funkciju kojoj se proslijeðuje nesortiran niz.
// --------------------------------------------------------------------------------------- //

Zadatak 03
// --------------------------------------------------------------------------------------- //
Napisati program koji æe omoguæiti:
  •Unos 2D niza od 10x10 elemanata vodeæi raèuna da su svi elementi dvocifreni 
   (ukoliko unos nekog elementa ne zadovoljava uslov, ponavljati unos tog elementa 
   dok se ne zadovolji uslov) – Koristiti funkciju unos 
  •Izvršiti transpoziciju niza tako što æe se zamjeniti redovi i kolone – Koristiti 
   funkciju transpose, a zatim na osnovu izmijenjenog 2D niza:
  •Izraèunati aritmetièku sredinu svih prostih brojeva ispod sporedne dijagonale – Koristiti 
   dvije funkcije: aritmeticka i prost_broj (pozivati æe se iz funkcije aritmeticka)
  •Napisati funkciju simpatican koja æe provjeriti da li su brojevi iznad sporedne dijagonale 
   simpatièni*.
  
  Obavezno koristiti navedene funkcije, a parametre i eventualne povratne vrijednosti 
  definisati prema potrebi. U main() funkciji napisati testni program koji æe omoguæiti 
  izvršenje svih funkcija navedenim redoslijedom.
  
  [a][a][a][a][a]        [a][b][c][d][e]
  [b][b][b][b][b]        [a][b][c][d][e]
  [c][c][c][c][c]  --->  [a][b][c][d][e]
  [d][d][d][d][d]        [a][b][c][d][e]
  [e][e][e][e][e]        [a][b][c][d][e]

Pomoæ: Broj je simpatièan ukoliko je zbir cifara njegovog kvadrata jednak kvadratu zbira 
njegovih cifara. Broj 21 je simpatièan jer je s(441) = s(21) * s(21)  pri èemu je s(n) 
zbir cifara prirodnog broja n.
// --------------------------------------------------------------------------------------- //

Zadatak 04
// --------------------------------------------------------------------------------------- //
Napisati program koji od korisnika zahtijeva unos niza od najviše 20 realnih brojeva 
u rasponu od -100 do 100. U sluèaju da korisnik unese bilo koji broj izvan datog 
raspona korisnik ponavlja unos tog elementa niza. Takoðer, unos je moguæe prekinuti 
prije nego što se dostigne kapacitet niza unosom broja 0 koji ne treba da bude element 
niza i služi samo za prekid. Nakon toga, program raèuna aritmetièku sredinu unesenih brojeva, 
te iz niza izbacuje sve one elemente èija je udaljenost od aritmetièke sredine veæa od 10, 
na naèin da se saèuva redoslijed dodavanja elemenata. Implementaciju uraditi upotrebom sljedeæih 
funkcija:
  •void unos (double[], int, int&); gdje je treæi parametar stvarna velièina niza nakon unosa;
  •double aritmeticka_sredina(double[], int);
  •void ukloni(double[], int, double, int&); gdje je drugi parametar aritmetièka sredina, 
a posljednji velièina niza nakon uklanjanja elemenata.
  
U glavnom programu testirati dostupne funkcije, te obaviti ispis elemenata niza nakon uklanjanja 
vodeæi se datim primjerom izlaza.
  
Unesite elemente niza: 2.5 -8.9 15.89 16.78 34 25 11 0
Aritmeticka sredina elemenata niza iznosi: 13.75
Sadrzaj niza nakon uklanjanja: 15.89 16.78 11.00
// --------------------------------------------------------------------------------------- //

Zadatak 05
// --------------------------------------------------------------------------------------- //
Neka je data matrica kompetencija studenata dimenzija 10x5, gdje svaki red matrice 
predstavlja studenta, a svaka kolona matrice kompetenciju koju je potrebno evaluirati. Matrica 
sadrži podatke o studentima sa dva studijska programa, prvih 5 redova za jedan i drugih 5 redova 
za drugi program. Kompetencije se definišu putem sljedeæe skale: 
  A (ekspert), 
  B (struènjak), 
  C (zadovoljava), 
  D (djelimièno zadovoljava) i 
  E (ne zadovoljava). 
Napisati program koji æe implementirati i testirati sljedeæe funkcije:
  •evaluiraj – funkcija omoguæava unos evaluacije za odreðenog (odabranog u glavnom programu) 
   studenta (unosi se samo jedan red matrice), na naèin da su dozvoljene samo vrijednosti 
   usvojene prethodnom skalom (A, B, C, D i E). U sluèaju unosa bilo kojeg karaktera izvan 
   ovog opsega, potrebno je ponoviti unos. Prilikom unosa ispisati poruku za svaku kompetenciju 
   na sljedeæi naèin: „Unesite evaluaciju za kompetenciju C1“, i tako redom za svaku kolonu.
  •najuspjesnija_kompetencija – funkcija pronalazi kompetenciju (u oba studijska programa) koja je 
   najuspješnija, odnosno na kojoj su studenti ostvarili najbolji rezultat, te vraæa i prosjeènu 
   ocjenu za tu kompetenciju. 
   Napomena: Pridružiti svakoj oznaci numerièku vrijednost, radi jednostavnosti kalkulacije i 
   poreðenja uspjeha pojedinih kompetencija. Koristiti prosljeðivanje najmanje jednog parametra 
   po referenci, te ispis rezultata ne vršiti u funkciji.
  •najuspjesniji_student – funkcija pronalazi najuspješnijeg studenta u odabranom studijskom 
   programu (studijski program se bira u glavnom programu putem vrijednost 1 (prvih 5 redova) ili 2
   (drugih 5 redova),te vraæa i prosjeènu ocjenu tog studenta. Vrijede iste napomene kao i za
   prethodnu funkciju.
  
U glavnom programu testirati implementirane funkcije na naèin da se uz uspjeh kompetencije ili
studenta definiše opisna evaluacija (ekspert, struènjak,...). Dodatno ispisati podatke o 
najuspješnijem studentu, posmatrajuæi oba studijska programa. Ispis najsupješnije kompetencije 
ili   studenta izvršiti sa oznakama C ili S, uz redni broj kolone ili reda gdje se nalaze u matrici.
 
Npr. Najuspješniji student je S2 sa prosjeènom ocjenom „struènjak“.
// --------------------------------------------------------------------------------------- //

Zadatak 06
// --------------------------------------------------------------------------------------- //
Napisati program koji æe korisniku omoguæiti unos pozitivnih neparnih cijelih brojeva za 
koje æe se ispitivati da li im je prva cifra parna (npr. 4993 ili 4999). Ukoliko je zadovoljen 
uslov broj se smješta u niz od 10 elemenata. Unos se ponavlja dok se ne popuni niz od 10 
elemenata koji zadovoljavaju uslov unosa. Unos se prekida ukoliko korisnik unese vrijednost 
0 te se i izvršenje program završava uz poruku "Forsirani prekid". Zatim se za sve elementi 
niza ispituje da li je broj prost i da li ima samo jednu parnu cifru. Ako broj nije prost i
ako ima više od jedne parne cifre, broj se izbacuje iz niza tako što se njegova vrijednost 
mijenja sa 0. Na kraju niz sortirati od najveæeg ka najmanjem broju te ga ispisati. Koristiti 
odvojene funkcije za provjeru da li je broj prost, za sortiranje i ispis niza. 
// --------------------------------------------------------------------------------------- //

Zadatak 07
// --------------------------------------------------------------------------------------- //
 Deklarisati kvadratnu matricu cijelih brojeva proizvoljnih dimenzija, te 
  implementirati sljedeæe funkcije:
  •Funkciju za unos i formiranje elemenata matrice prema sljedeæem obrascu: 
  elemente neparnih redova matrice (1., 3., 5. itd.) èine minimalno trocifreni 
  brojevi koje unosi korisnik programa (u sluèaju unosa bilo kojeg broja koji 
  ne zadovoljava postavljeni uslov, ponoviti unos); elementi parnih redova matrice 
  se formiraju na osnovu elemenata iz prethodnog reda u istoj koloni matrice i to 
  na naèin da je svaki novokreirani element matrice zapravo element s obrnutim 
  redoslijedom cifri elementa iznad njega. 
  •Za odreðivanje broja s obrnutim redoslijedom cifri kreirati zasebnu funkciju 
  obratno, te je pozvati u funkciji unos. 
  •Takvu matricu proslijediti zasebnoj funkciji max koja æe formirati novi 
  jednodimenzionalni niz èije èlanove èine najveæi èlanovi matrice po redovima 
  te ispisati ove èlanove.
  •Formirati posebnu funkciju iznad_dijagonala koja æe ispisati broj elemenata matrice 
  koji se nalaze iznad glavne i sporedne dijagonale. Ove elemente unutar funkcije spremati 
  u niz èija velièina zavisi od dimenzije matrice. Velièina niza treba biti fiksna i mora 
  odgovarati toènom broju elemenata. 
  
  Kreirati kratki testni program koji demonstrira funcionalnost kreiranih funkcija.
  Primjer matrice dimenzija 4x4 i oèekivanih rezultata:
  
  +--------+--------+--------+--------+
  |  2163  |  123   |  30425 |   671  |  
  +--------+--------+--------+--------+
  |  3612  |  321   |  52403 |   176  |  
  +--------+--------+--------+--------+
  |  7331  |  6113  | 741232 |   798  |  
  +--------+--------+--------+--------+
  |  1337  |  3116  | 232147 |   897  |  
  +--------+--------+--------+--------+
  
  Elementi iznad obje dijagonale su: 123, 30452.
  Funkcija max æe ispisati sljedeæe brojeve: 
  30452, 25403, 741232, 232147 jer su to najveæi brojevi po redovima.
// --------------------------------------------------------------------------------------- //

Zadatak 08
// --------------------------------------------------------------------------------------- //
Napisati funkciju koja niz od 10 cijelih brojeva sortira u opadajuæem 
  ili rastuæem poretku. Unos elemenata niza se obavlja u glavnom programu, 
  kao i odabir opcije koja odreðuje da li rezultirajuæi niz treba biti opadajuæi ili rastuæi. 
  Obavezno testirati implementiranu funkciju vodeæi se datim primjerom ispisa. 
  
  (Pojasnjenje: Nema posebnog pojasnjenja jer se radi o najjednostavijem sortiranju uzlazno 
  ili silazno u odnosu na korisnicki izbor.)
  Unesite elemente niza: 12 2 3 0 45 6 98 -9 3 -10
  
  Kako zelite sortirati niz (unesite 1 ili 2): 
	1. U opadajucem poretku
	2. U rastucem poretku
  1
  
  Rezultirajuci niz: 98 45 12 6 3 3 2 0 -9 -10
// --------------------------------------------------------------------------------------- //

Zadatak 09
// --------------------------------------------------------------------------------------- //
Uz pomoæ matrice realnih brojeva dimenzija 5x7 izraditi program za evidenciju i kalkulaciju 
uspješnosti vremenskih prognoza (prosjeènih dnevnih temperatura) odreðenog grada. Redovi 
matrice predstavljaju meteorologe èije se prognoze unose, dok se kolone odnose na vremenski 
period od 7 dana. Uz matricu je neophodno krerati globalni jednodimenzionalni niz od 7 elemenata 
koji æe èuvati stvarna mjerenja temperatura za isti vremenski period, a na osnovu kojeg æe se 
procijeniti uspješnost prognoza pojedinih meteorologa. Vrijednosti elemenata ovog niza prilikom 
deklaracije postaviti na: 25.5, 26.8, 21, 32, 35.6, 36, 33.5.
  
Implementaciju programa uraditi pomoæu sljedeæih funkcija:
 • UnesiPrognoze – funkcija za unos prognoza odreðenog meteorologa za kompletan period od 7 dana. 
   Vrijednosti prosjeènih temperatura moraju biti unutar intervala [-20, 50] °C. 
   (Pojasnjenje: unose se podaci za samo jedan izabrani red. Tako ce se korisniku omoguciti da unese 
   prognoze za jednog po jednog meteorologa.)
 • IzracunajUspjesnost – funkciju koja vraæa procentualnu vrijednost uspješnosti prognoza za željenog          meteorologa. Prognoza, odnosno prosjeèna temperatura na odreðeni dan, smatra se uspješnom ako od          stvarnog mjerenja ne odstupa više od 5 °C. (Pojasnjenje: poredi se podaci iz jednog reda odnosno 
   za jednog meteorologa sa podacima iz posebnog niza koji sadrži stvarne vrijednosti mjerenja, te 
   ako je razlika manja od +/-5 taj podatak se smatra uspjesnom prognozom. Na kraju treba podjeliti 
   broj uspjesnih prognoza sa 7 koliko ima dana u sedmici i vratiti procenat uspjesnosti.)
 • PronadjiNajuspjesnijegMeteorologa – funkciju koja pronalazi meteorologa sa najtaènijim vremenskim 
   prognozama, odnosno najveæim procentom uspjeha. (Pojasnjenje: Red koji ima najveci procenat koji 
   se dobije iz prethodno opisane funkcije IzracunajUspjesnost je u stvari red sa najuspjesnijim          meteorologom.)  
 • PronadjiDanSaNajnizimPrognozama – funkciju koja pronalazi dan koji je imao u prosjeku najnize 
   prognoze. (Pojasnjenje: Naci kolonu sa najnizom aritmetickom sredinom svih svojih vrijednosti.
   Nije potrebno porediti sa nizom sa stvarnim temperaturama.)
   
Napisati i kratak testni program za provjeru ispravnosti implementiranih funkcija.
// --------------------------------------------------------------------------------------- //

Zadatak 10
// --------------------------------------------------------------------------------------- //
Napisati funkciju koja kao parametare prima dva niza char recenica[200] i char rijec[10] 
odnosno reèenicu (niz od najviše 200 karaktera) i rijeè (niz od najviše 10 karaktera) 
te u nizu recenica[200] pretrazuje i pronalazi sekvencu karaktera unesenih u niz rijec[10]. 
Radi jednostavnosti rjesenja podrazumjeva se da i recenica i rijec koja se pretrazuje zavrsavaju    tackom.Poslije pronalaska trazene rijeci, pomenutu rijec treba zamijeniti karakterima "FIT" 
(Pomoc: Treba voditi racuna koliko karaktera ima rijec koja je pronadjena i zamjenjena)
   
Npr. ako je data reèenica u nizu recenica[200]:
 "Ja studiram na fakultetu jer zelim biti expert." i rijec[10]: "fakultet“,
funkcija je treba pronaci rijec „fakultet“ u recenici i pretvoriti je u "FIT“:
 "Ja studiram na FITu jer zelim biti expert." 
(ima ukupno manje slova a zadrzan je samo po jedan space izmedju rijeci). 
   
Obavezno u main funkciji omoguciti unos recenice, zatim trazene rijeci i ispisati novu 
recenicu poslije zamjene.
// --------------------------------------------------------------------------------------- //

Zadatak 11
// --------------------------------------------------------------------------------------- //
Neka je dat 2D niz tipa int dimenzija 5x5. Kreirati, a potom u glavnom programu 
  testirati, sljedeæe funkcije:
  a) Funkciju koja vrši generisanje Fibonaccijevih brojeva u 2D nizu dok se niz ne popuni
  b) Funkcija koja ispisuje najveæe zajednièke djelitelje brojeva na suprotnim indeksima 
     matrice koristeæi Euklidov algoritam, kad se indeksi izjednaèe petlja se treba prekinuti:
     Euklidov algoritam(a,b):
      Dok(b>0)
	p=a;
	a=b;
	b = p mod b;
        NZD=a;
     Gdje je 'p' pomoæna varijabla. Suprotni indeksi matrice su matrica[0,0] i matrica[5,5], 
     zatim matrica[0,1] i matrica [5,4] itd.
     
  Primjer: Najveæi zajednièki djelitelj za brojeve 610 i 34 je 2. 
  	   Najveæi zajednièki djelitelj za brojeve 8 i 2584 je 8 itd. 
// --------------------------------------------------------------------------------------- //

Zadatak 12
// --------------------------------------------------------------------------------------- //
  Neka je dat 2D niz tipa int dimenzija 10x10. Kreirati, a potom u glavnom programu 
  testirati, sljedeæe funkcije:
  a) Funkciju koja za vrsi generisanje podataka u 2D nizu na nacin da se u elementu sa 
     indexom [0][0] upise vrijednost 1 a svaki slijedeci element da ima vrijednost prethodnog 
     elementa pomnozenog sa 2 kao na slici. Generisanje se prekida ako se desi overflow na
     varijabli int.
  b) Funkciju koja popunjenu matricu iz pod-zadatka a) transponuje tako sto joj zamjeni redove i 
     kolone.
  c) Funkciju koja kao parametar prima pomenuti niz i index kolone te silazno sortira kompletan 
     2D niz po izabranoj koloni na nacin da se kompletni redovi zamjene prema vrijednosti u 
     izabranoj koloni (princip sortiranja po koloni kao u MS Excel tabeli)
     
     +------+------+------+------+------+------+------+------+------+------+
     |  1   |  2   |  4   |  8   |  16  |  32  |  64  | 128  | 256  | 512  |
     +------+------+------+------+------+------+------+------+------+------+
     | 1024 | 2048 | itd. | itd. | itd. | itd. | itd. | itd. | itd. | itd. |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
     |      |      |      |      |      |      |      |      |      |      |
     +------+------+------+------+------+------+------+------+------+------+
// --------------------------------------------------------------------------------------- //

Zadatak 13
// --------------------------------------------------------------------------------------- //
Napisati program koji æe uèitati cijeli broj n (1 <= n <= 10), (ukoliko unesena vrijednost 
nije unutar intervala, uèitavanje treba ponavljati sve dok se ne unese ispravna vrijednost)  
i elemente matrice dimenzije nxn te ispisati da li je matrica centralno simetrièna s obrzirom
na središnji element. Ako jeste, program treba ispisati 1, ako nije ispisati 0, a ako je
broj redova paran (pa nema središnjeg elementa) ispisati -1. Koristite posebne funkcije
za unos elemenata i provjeru simetriènosti.
  
Primjer centralno simetriène matrice:
  
  3 1 2             [1]  4  [5]  8  [7]
  5 4 5              3  [1] [2] [4]  6
  2 1 3             [7] [5] [3] [5] [7]
                     6  [4] [2] [1]  3
                    [7]  8  [5]  4  [1]
// --------------------------------------------------------------------------------------- //